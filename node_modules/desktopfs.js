const fs = require("fs")
const path = require("path")

/**
 * Desktop File System module to be used as Kofax RPA Connector
 * 
 * Copy, move and delete files, check for file existens and directory listing
 * 
 * @author Robert Birkenheuer
 * @version 0.1
 */
var dfs = {

  _resultList: new Array,
  _results: 0,

  /**
   * Lists a directory
   * 
   * @param {string} dirPath Directory location
   * @return {JSON} Respone object including dirinfo array
   */
  listdir: function(dirPath) {
    var status = ""
    var message = ""
    /* important resets */
    this._resultList = new Array
    this._results = 0
    try {
      var files = fs.readdirSync(dirPath)
      files.forEach(function(file) {
          try {
            var info = fs.statSync(dirPath + "/" + file)
            dfs._resultList.push(dfs._getDirInfo(dirPath + "/" + file, info))
          } catch (err) {
            /* ignore files/directories with no permissions, but output other exceptions */
            if (! err.message.includes("operation not permitted")) {
              throw err
            }
          }
      })
      status = "ok"
      message = "Directory of " + dirPath + " ("  + files.length + " files)" 
    } catch(e) {
      status = "error"
      message = e.message
      this._resultList = []
    }
    var response_text = {
      "status": status,
      "message" : message,
      "dirinfo" : this._resultList
    } 
    return JSON.stringify(response_text)
  },

  /**
   * Lists a directory recursively
   * 
   * @param {string} dirPath Directory location
   * @param {number} maxresults Maximum number of results
   * @return {JSON} Respone object including dirinfo array
   */
  listdir_rec: function(dirPath, maxresults) {
    var status = ""
    var message = ""
    var arrFiles
    /* important resets */
    this._resultList = new Array
    this._results = 0
    try {
      arrFiles = this._getDirList(dirPath, arrFiles, maxresults)
      status = "ok"
      if (this._results < maxresults) {
        message = "Directory of " + dirPath + " ("  + this._results + " files)"
      } else {
        message = "More results found, please narrow your search (maxresults = " + maxresults + ")" 
      }
    } catch(e) {
      status = "error"
      message = e.message
      this._resultList = []
    }
    var response_text = {
      "status": status,
      "message" : message,
      "dirinfo" : this._resultList
    } 
    return JSON.stringify(response_text)
  },

  /**
   * Test for file or directory existence
   * 
   * @param {string} path Location path
   * @return {JSON} Respone object
   */
  exists: function(path) {
    var status = ""
    var message = ""
    try {
      if (fs.existsSync(path)) {
        status = "true"
        message = path
      } else {
        status = "false"
        message = path
      }
    } catch(e) {
      status = "error"
      message = e.message
    }
    var response_text = {
      "status": status,
      "message" : message
    } 
    return JSON.stringify(response_text)
  },

  /**
   * Copy a file
   * 
   * @param {string} source Source location
   * @param {string} destination Destination location
   * @param {number} overwrite Overwrite existing, 1 = true, 0 = false
   */
  copyfile: function(source, destination, overwrite) {
    var status = ""
    var message = ""
    try {
      if (overwrite) {
        fs.copyFileSync(source, destination);
      } else {
        fs.copyFileSync(source, destination, fs.constants.COPYFILE_EXCL);
      }
      status = "ok"
      message = "File copied to " + destination
    } catch(e) {
      status = "error"
      message = e.message
    }
    var response_text = {
      "status": status,
      "message" : message
    } 
    return JSON.stringify(response_text)
  },

  /**
   * Move a file
   * 
   * @param {string} source Source location
   * @param {string} destination Destination location
   * @param {number} overwrite Overwrite existing, 1 = true, 0 = false
   */
  movefile: function(source, destination, overwrite) {
    var status = ""
    var message = ""

    try {
      if (fs.statSync(source).isDirectory()) {
        status = "error"
        message = "Operation not allowed on directories " + source
      } else {
        if (fs.existsSync(destination) && overwrite == 0 ) {
          status = "error"
          message = "Destination file already exists " + destination
        } else {
          fs.renameSync(source, destination)
          status = "ok"
          message = "File moved to " + destination
        }
      }
    } catch(e) {
      status = "error"
      message = e.message
    }
    var response_text = {
      "status": status,
      "message" : message
    } 
    return JSON.stringify(response_text)
  },

  /**
   * Delete a file
   * 
   * @param {string} path Location path
   */
  deletefile: function(path) {
    var status = ""
    var message = ""
    try {
      fs.unlinkSync(path)
      status = "ok"
      message = "File deleted " + path
    } catch(e) {
      status = "error"
      message = e.message
    }
    var response_text = {
      "status": status,
      "message" : message
    } 
    return JSON.stringify(response_text)
  },

  /**
   * Format a dirinfo object
   * 
   * @private
   * @param {string} name Location name
   * @param {fs.Stats} info Stats object returned from fs.fstatSync
   */
  _getDirInfo: function(name, info) {
    var dirinfo = {
      "name": name,
      "size": info.size,
      "dir": info.isDirectory() ? "<DIR>" : "", 
      "created": info.birthtime,
      "modified": info.ctime
      }
    return dirinfo
  },

  /**
   * Recursive loop function for listdir_rec
   * 
   * @private
   * @param {string} dirPath 
   * @param {Array} arrFiles 
   * @param {number} maxresults 
   */
  _getDirList: function(dirPath, arrFiles, maxresults) {
    files = fs.readdirSync(dirPath)
    arrFiles = arrFiles || []
    files.forEach(function(file) {
      if (dfs._results < maxresults) {

        try {
          var info = fs.statSync(dirPath + "/" + file)
          if (info.isDirectory()) {
              arrFiles = dfs._getDirList(dirPath + "/" + file, arrFiles, maxresults)
          } else {
            dfs._resultList.push(dfs._getDirInfo(dirPath + "/" + file, info))
            arrFiles.push(path.join(dirPath, "/", file))
            dfs._results++
          }
        } catch (e) {
          /* ignore files/directories with no permissions, but output other errors */
          if (! e.message.includes("operation not permitted")) {
            throw e
          }
        }
      }
    })
    return arrFiles
  }
};

module.exports = dfs;
